interface Module {
    void render();  // All modules will implement their own render logic
    
    //Methods to get/set position and size
    void setPosition(float x, float y);
    void setSize(float w, float h);
    void setPGraphics(PGraphics pg);
    
    float getX();
    float getY();
    float getWidth();
    float getHeight();
    PGraphics getPGraphics();
}



class TemporalModule implements Module{
    float x, y, w, h;
    PGraphics pg;
    
    void render() {
        pg.beginDraw();  // Start drawing on the PGraphics buffer
        pg.background(255);
        
        // make sure to load ui elements here !!!
        pg.endDraw();  // End drawing on the PGraphics buffer
        displayGraphics(pg, x, y, w, h);
        
    }
    
    
    public void setPosition(float x, float y) {
        this.x = x;
        this.y = y;
    }
    
    public void setSize(float w, float h) {
        this.w = w;
        this.h = h;
    }
    
    public void setPGraphics(PGraphics pg) {
        this.pg = pg;
    }
    
    public float getX() { return x; }
    public float getY() { return y; }
    public float getWidth() { return w; }
    public float getHeight() { return h; }
    public PGraphics getPGraphics() { return pg; }
}

class SpatialModule implements Module{
    float x, y, w, h;
    PGraphics pg;
    
    void render() {
        pg.beginDraw();  // Start drawing on the PGraphics buffer
        pg.background(255);
        
        pg.pushMatrix();
        pg.translate(x, y);
        
        pg.popMatrix();
        
        pg.endDraw();  // End drawing on the PGraphics buffer
        displayGraphics(pg, x, y, w, h);
        
    }
    
    
    public void setPosition(float x, float y) {
        this.x = x;
        this.y = y;
    }
    
    public void setSize(float width, float height) {
        this.w = w;
        this.h = h;
    }
    
    public void setPGraphics(PGraphics pg) {
        this.pg = pg;
    }
    
    public float getX() { return x; }
    public float getY() { return y; }
    public float getWidth() { return w; }
    public float getHeight() { return h; }
    public PGraphics getPGraphics() { return pg; }
}

class SocialModule implements Module{
    float x, y, w, h;
    PGraphics pg;
    
    void render() {
        pg.beginDraw();  // Start drawing on the PGraphics buffer
        pg.background(255);
        pg.endDraw();  // End drawing on the PGraphics buffer
        displayGraphics(pg, x, y, w, h);
        
    }
    
    
    public void setPosition(float x, float y) {
        this.x = x;
        this.y = y;
    }
    
    public void setSize(float w, float h) {
        this.w = w;
        this.h = h;
    }
    
    public void setPGraphics(PGraphics pg) {
        this.pg = pg;
    }
    
    public float getX() { return x; }
    public float getY() { return y; }
    public float getWidth() { return w; }
    public float getHeight() { return h; }
    public PGraphics getPGraphics() { return pg; } 
}



class IntroModule implements Module{
    float x, y, w, h;
    PGraphics pg;
    
    Button[] buttons;
    
    float paddingSides = 10;
    float paddingTop = 14;
    
    public void init() {
        initButtons();
        
    }
    
    public void initButtons() {
        buttons = new Button[2];
        
        float xScl = 150;
        float yScl = 80; 
        
        buttons[0] = new LoadProjectButton();
        buttons[0].setPosition((w - xScl) / 2, 300);
        buttons[0].setSize(xScl, yScl);
        buttons[0].setLabel("Load Project");
        buttons[0].setActive(false);
        buttons[0].setPGraphics(introGraphics);

        buttons[1] = new NewProjectButton();
        buttons[1].setPosition((w - xScl) / 2, 300 + yScl + 30);
        buttons[1].setSize(xScl, yScl);
        buttons[1].setLabel("New Project");
        buttons[1].setActive(false);
        buttons[1].setPGraphics(introGraphics);
    }
    
    void render() {
        
        
        pg.beginDraw();  // Start drawing on the PGraphics buffer
        pg.background(255);
        pg.fill(0);
        pg.textFont(lBold);
        pg.textAlign(LEFT, TOP);
        pg.text("GEOPOLITICAL\nMAPPING", paddingSides, paddingTop);
        
        // make sure to load ui elements here !!!
        for(Button b : buttons){
            b.render();
        }
        pg.endDraw();  // End drawing on the PGraphics buffer
        displayGraphics(pg, x, y, w, h);
        
    }
    
    
    public void setPosition(float x, float y) {
        this.x = x;
        this.y = y;
    }
    
    public void setSize(float w, float h) {
        this.w = w;
        this.h = h;
    }
    
    public void setPGraphics(PGraphics pg) {
        this.pg = pg;
    }
    
    public float getX() { return x; }
    public float getY() { return y; }
    public float getWidth() { return w; }
    public float getHeight() { return h; }
    public PGraphics getPGraphics() { return pg; } 
    
}

class NewProjectModule implements Module{
    float x, y, w, h;
    PGraphics pg;
    
    void render() {
        pg.beginDraw();  // Start drawing on the PGraphics buffer
        pg.background(255);
        
        
        pg.endDraw();  // End drawing on the PGraphics buffer
        displayGraphics(pg, x, y, w, h);
        
    }
    
    
    public void setPosition(float x, float y) {
        this.x = x;
        this.y = y;
    }
    
    public void setSize(float w, float h) {
        this.w = w;
        this.h = h;
    }
    
    public void setPGraphics(PGraphics pg) {
        this.pg = pg;
    }
    
    public float getX() { return x; }
    public float getY() { return y; }
    public float getWidth() { return w; }
    public float getHeight() { return h; }
    public PGraphics getPGraphics() { return pg; } 
    
}
