/* autogenerated by Processing revision 1295 on 2025-04-06 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.javafx.*;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.TimeZone;
import java.util.Map;
import java.math.BigInteger;
import java.security.SecureRandom;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Prototype_Refactored extends PApplet {

ProgramRunner programRunner;

public void setup(){
    /* size commented out by preprocessor */;
    surface.setLocation(1600, 320);
    surface.setTitle("Home");

    /* pixelDensity commented out by preprocessor */;
    programRunner = new ProgramRunner();
    init();
}


public void draw(){
    background(255);
    run(programRunner.programState);

   // modules[1].setPosition(mouseX, mouseY);
}


Module[] modules;
Module[] introModules; 
PGraphics introGraphics, newProjectGraphics;
PGraphics socialGraphics, spatialGraphics, temporalGraphics; 
ProjectData projectData;
WorldMap worldMap;





class Entity {
    String id;
    String label;
    PVector location; // null if non-spatial
    String category;
    String description;
}

class Event {
    String id;
    String label;
    String timestamp; // ISO 8601
    PVector location; // optional
    String description;
}

class Connection{
    String sourceId;
    String targetId;
    String type;
}

class WorldMap {
    JSONObject geojson;
    JSONArray features;
    ArrayList<ArrayList<ArrayList<PVector>>> countryPolygons = new ArrayList<>();

    int hoveredIndex = -1;

    WorldMap() {
        init();
    }

    public void init() {
        loadGeoData();
    }

    public void loadGeoData() {
        geojson = loadJSONObject("mapGeoJSON.geojson");
        features = geojson.getJSONArray("features");
    }

    public void initGeometry(float w, float h) {
        for (int i = 0; i < features.size(); i++) {
            JSONObject feature = features.getJSONObject(i);
            JSONObject geometry = feature.getJSONObject("geometry");
            String type = geometry.getString("type");

            ArrayList<ArrayList<PVector>> country = new ArrayList<>();

            if (type.equals("Polygon")) {
                country.add(processPolygon(geometry.getJSONArray("coordinates"), w, h));
            } else if (type.equals("MultiPolygon")) {
                JSONArray polygons = geometry.getJSONArray("coordinates");
                for (int j = 0; j < polygons.size(); j++) {
                    country.add(processPolygon(polygons.getJSONArray(j), w, h));
                }
            }
            countryPolygons.add(country);
        }
    }

    public PGraphics getMap(float w, float h) {
        initGeometry(w, h);
        PGraphics pg = createGraphics(floor(w), floor(h), P2D);
        pg.beginDraw();
        pg.background(255);

        pg.stroke(0);
        pg.strokeWeight(0.25f);
        pg.noFill();

        for (int i = 0; i < countryPolygons.size(); i++) {
            ArrayList<ArrayList<PVector>> country = countryPolygons.get(i);
            for (ArrayList<PVector> poly : country) {
                pg.beginShape();
                for (PVector pt : poly) pg.vertex(pt.x, pt.y);
                pg.endShape(CLOSE);
            }
        }
        pg.endDraw();
        return pg;
    }

    public ArrayList<PVector> processPolygon(JSONArray rings, float w, float h) {
        ArrayList<PVector> screenRing = new ArrayList<>();

        for (int i = 0; i < rings.size(); i++) {
            JSONArray ring = rings.getJSONArray(i);
            for (int j = 0; j < ring.size(); j++) {
                JSONArray coord = ring.getJSONArray(j);
                float lon = coord.getFloat(0);
                float lat = coord.getFloat(1);
                screenRing.add(latLonToPixel(lat, lon, w, h));
            }
        }

        return screenRing;
    }

    public PGraphics getSubset(PVector latlonA, PVector latlonB, float fullMapW, float fullMapH) {
        PVector p1 = latLonToPixel(latlonA.x, latlonA.y, fullMapW, fullMapH);
        PVector p2 = latLonToPixel(latlonB.x, latlonB.y, fullMapW, fullMapH);

        int x = floor(min(p1.x, p2.x));
        int y = floor(min(p1.y, p2.y));
        int w = ceil(abs(p1.x - p2.x));
        int h = ceil(abs(p1.y - p2.y));

        PGraphics fullMap = getMap(fullMapW, fullMapH);
        PGraphics subset = createGraphics(w, h, P2D);
        subset.beginDraw();
        subset.image(fullMap, -x, -y);
        subset.endDraw();
        return subset;
    }

}

class WorldMapSubset extends WorldMap {
    PVector minLatLon;
    PVector maxLatLon;

    WorldMapSubset(PVector latlonA, PVector latlonB, float w, float h) {
        minLatLon = new PVector(min(latlonA.x, latlonB.x), min(latlonA.y, latlonB.y));
        maxLatLon = new PVector(max(latlonA.x, latlonB.x), max(latlonA.y, latlonB.y));

        loadGeoData();
        extractSubset(w, h);
    }

    public void extractSubset(float w, float h) {
        for (int i = 0; i < features.size(); i++) {
            JSONObject feature = features.getJSONObject(i);
            JSONObject geometry = feature.getJSONObject("geometry");
            String type = geometry.getString("type");

            ArrayList<ArrayList<PVector>> country = new ArrayList<>();

            if (type.equals("Polygon")) {
                ArrayList<PVector> ring = parsePolygonToScreen(geometry.getJSONArray("coordinates"), w, h);
                if (!ring.isEmpty()) country.add(ring);
            } else if (type.equals("MultiPolygon")) {
                JSONArray polygons = geometry.getJSONArray("coordinates");
                for (int j = 0; j < polygons.size(); j++) {
                    ArrayList<PVector> ring = parsePolygonToScreen(polygons.getJSONArray(j), w, h);
                    if (!ring.isEmpty()) country.add(ring);
                }
            }

            if (!country.isEmpty()) countryPolygons.add(country);
        }
    }

    public ArrayList<PVector> parsePolygonToScreen(JSONArray rings, float w, float h) {
        ArrayList<PVector> screenRing = new ArrayList<>();

        for (int i = 0; i < rings.size(); i++) {
            JSONArray ring = rings.getJSONArray(i);
            for (int j = 0; j < ring.size(); j++) {
                JSONArray coord = ring.getJSONArray(j);
                float lon = coord.getFloat(0);
                float lat = coord.getFloat(1);
                screenRing.add(latLonToPixel(lat, lon, w, h));
            }
        }
        return screenRing;
    }
}

//  ——————————————————————————————————————————————————————————————————————————————————  ||  PROJECT DATA

class ProjectData {
    ArrayList<Entity> entities;
    ArrayList<Event> events;
    ArrayList<Connection> connections;
    String projectName;
    String projectDescription;
    String startDate;
    String endDate;
    String startBB;
    String endBB;
    
    ProjectData() {
        entities = new ArrayList<Entity>();
        events = new ArrayList<Event>();
        connections = new ArrayList<Connection>();
    }
}

public void saveProjectData(String filename) {
    JSONObject json = new JSONObject();
    JSONArray entitiesArr = new JSONArray();
    JSONArray eventsArr = new JSONArray();
    JSONArray connectionsArr = new JSONArray();
    
    for (Entity e : projectData.entities) {
        JSONObject o = new JSONObject();
        o.setString("id", e.id);
        o.setString("label", e.label);
        o.setString("category", e.category);
        o.setString("description", e.description);
        if (e.location != null) {
            o.setFloat("x", e.location.x);
            o.setFloat("y", e.location.y);
        }
        entitiesArr.append(o);
    }
    
    for (Event ev : projectData.events) {
        JSONObject o = new JSONObject();
        o.setString("id", ev.id);
        o.setString("label", ev.label);
        o.setString("timestamp", ev.timestamp);
        o.setString("description", ev.description);
        if (ev.location != null) {
            o.setFloat("x", ev.location.x);
            o.setFloat("y", ev.location.y);
        }
        eventsArr.append(o);
    }
    
    for (Connection c : projectData.connections) {
        JSONObject o = new JSONObject();
        o.setString("sourceId", c.sourceId);
        o.setString("targetId", c.targetId);
        o.setString("type", c.type);
        connectionsArr.append(o);
    }
    
    json.setJSONArray("entities", entitiesArr);
    json.setJSONArray("events", eventsArr);
    json.setJSONArray("connections", connectionsArr);
    json.setString("projectName", projectData.projectName);
    json.setString("projectDescription", projectData.projectDescription);
    json.setString("startDate", projectData.startDate);
    json.setString("endDate", projectData.endDate);
    json.setString("startBB", projectData.startBB);
    json.setString("endBB", projectData.endBB);
    saveJSONObject(json, filename);
}

public void loadProjectData(String filename) {
    JSONObject json = loadJSONObject(filename);
    if (json == null) return;
    projectData = new ProjectData();
    projectData.projectName = json.getString("projectName", "");
    projectData.projectDescription = json.getString("projectDescription", "");

    projectData.startDate = json.getString("startDate", "");
    projectData.endDate = json.getString("endDate", "");

    projectData.startBB = json.getString("startBB", "");
    projectData.endBB = json.getString("endBB", "");
    
    JSONArray entitiesArr = json.getJSONArray("entities");
    for (int i = 0; i < entitiesArr.size(); i++) {
        JSONObject o = entitiesArr.getJSONObject(i);
        Entity e = new Entity();
        e.id = o.getString("id");
        e.label = o.getString("label");
        e.category = o.getString("category");
        e.description = o.getString("description");
        if (o.hasKey("x") && o.hasKey("y")) {
            e.location = new PVector(o.getFloat("x"), o.getFloat("y"));
        }
        projectData.entities.add(e);
    }
    
    JSONArray eventsArr = json.getJSONArray("events");
    for (int i = 0; i < eventsArr.size(); i++) {
        JSONObject o = eventsArr.getJSONObject(i);
        Event ev = new Event();
        ev.id = o.getString("id");
        ev.label = o.getString("label");
        ev.timestamp = o.getString("timestamp");
        ev.description = o.getString("description");
        if (o.hasKey("x") && o.hasKey("y")) {
            ev.location = new PVector(o.getFloat("x"), o.getFloat("y"));
        }
        projectData.events.add(ev);
    }
    
    JSONArray connectionsArr = json.getJSONArray("connections");
    for (int i = 0; i < connectionsArr.size(); i++) {
        JSONObject o = connectionsArr.getJSONObject(i);
        Connection c = new Connection();
        c.sourceId = o.getString("sourceId");
        c.targetId = o.getString("targetId");
        c.type = o.getString("type");
        projectData.connections.add(c);
    }
}











SecureRandom random = new SecureRandom();

PFont sBold, sLight, sRegular, sItalic, 
mBold, mLight, mRegular, mItalic, 
lBold, lLight, lRegular, lItalic;



public void init() {
    loadMap();
    loadFonts();
    initProjectData();
    initGraphics();
    initModules();
    
}

public void loadMap(){
    worldMap = new WorldMap();
}

public void initProjectData() {
    projectData = new ProjectData();
}

public void initModules() {
    
    // Module Array containing intro modules
    introModules = new Module[2];
    
    introModules[0] = new IntroModule(this); // Intro 
    introModules[0].setPosition(360, 60);
    introModules[0].setSize(240, 420);
    introModules[0].setPGraphics(introGraphics);
    introModules[0].init();

    introModules[1] = new NewProjectModule(); // New Project
    introModules[1].setPosition(240, 60);
    introModules[1].setSize(480, 420);
    introModules[1].setPGraphics(newProjectGraphics);
    introModules[1].init();

    
    // Module Array containing core modules
    modules = new Module[3];
    
    modules[0] = new TemporalModule(); // Temporal
    modules[0].setPosition(180, 360);
    modules[0].setSize(temporalGraphics.width, temporalGraphics.height);
    modules[0].setPGraphics(temporalGraphics);
    
    modules[1] = new SpatialModule(); // Spatial
    modules[1].setPosition(180, 0);
    modules[1].setSize(spatialGraphics.width, spatialGraphics.height);
    modules[1].setPGraphics(spatialGraphics);

    modules[2] = new SocialModule(); // Social
    modules[2].setPosition(540, 0);
    modules[2].setSize(socialGraphics.width, socialGraphics.height);
    modules[2].setPGraphics(socialGraphics);

}

public void initGraphics() {
    introGraphics = createGraphics(240, 420, P2D);
    newProjectGraphics = createGraphics(480, 420, P2D);
    temporalGraphics = createGraphics(780, 180, P2D);
    spatialGraphics = createGraphics(360, 360, P2D);
    socialGraphics = createGraphics(420, 360, P2D);
    
}

public void loadFonts() {
    int sScl = 10;
    int mScl = 14;
    int lScl = 16;
    
    sBold = createFont("Polymath-Bold", sScl);
    sLight = createFont("Polymath-Light", sScl);
    sRegular = createFont("Polymath-Medium", sScl);
    sItalic = createFont("Polymath-Italic", sScl);
    
    mBold = createFont("Polymath-Bold", mScl);
    mLight = createFont("Polymath-Light", mScl);
    mRegular = createFont("Polymath-Regular", mScl);
    mItalic = createFont("Polymath-Italic", mScl);
    
    lBold = createFont("Polymath-Bold", lScl);
    lLight = createFont("Polymath-Light", lScl);
    lRegular = createFont("Polymath-Regular", lScl);
    lItalic = createFont("Polymath-Italic", lScl);
    
}

interface Module {
    void run();  // All modules will implement their own render logic
    void init();
    void mouseClickedEvent();
    void keyPressedEvent();
    void mouseWheelEvent(float e);
    
    void mousedPressedEvent();
    void mouseDraggedEvent();
    void mouseReleasedEvent();
    
    // Methods to get/set position and size
    void setPosition(float x, float y);
    void setSize(float w, float h);
    void setPGraphics(PGraphics pg);
    
    float getX();
    float getY();
    float getWidth();
    float getHeight();
    PGraphics getPGraphics();
}



class TemporalModule implements Module{
    float x, y, w, h;
    PGraphics pg;
    
    
    public void init() {
    }
    
    
    
    public void run() {
        render();
    }
    
    public void render() {
        pg.beginDraw();  // Start drawing on the PGraphics buffer
        pg.background(255);
        
        // make sure to load ui elements here !!!
        pg.endDraw();  // End drawing on the PGraphics buffer
        displayGraphics(pg, x, y, w, h);
        
    }
    //  ——————————————————————————————————————————————————————————————————————————————————  ||  INIT
    
    //  ——————————————————————————————————————————————————————————————————————————————————  ||  RUN
    
    //  ——————————————————————————————————————————————————————————————————————————————————  || RENDER
    
    //  ——————————————————————————————————————————————————————————————————————————————————  ||  INTERACTION
    
    //  ——————————————————————————————————————————————————————————————————————————————————  ||  SET
    
    //  ——————————————————————————————————————————————————————————————————————————————————  ||  GET
    
    
    
    
    
    public void mouseClickedEvent() {}
    public void keyPressedEvent() {}
    public void mouseWheelEvent(float e) {}
    public void mousedPressedEvent() {}
    public void mouseDraggedEvent() {}
    public void mouseReleasedEvent() {}
    
    public void setPosition(float x, float y) {
        this.x = x;
        this.y = y;
    }
    
    public void setSize(float w, float h) {
        this.w = w;
        this.h = h;
    }
    
    public void setPGraphics(PGraphics pg) {
        this.pg = pg;
    }
    
    public float getX() { return x; }
    public float getY() { return y; }
    public float getWidth() { return w; }
    public float getHeight() { return h; }
    public PGraphics getPGraphics() { return pg; }
}

class SpatialModule implements Module{
    float x, y, w, h;
    PGraphics pg;
    WorldMapSubset mapSubset;
    ZoomableMap zoomableSubset;
    PGraphics subsetMapGraphic;
    
    //  ——————————————————————————————————————————————————————————————————————————————————  ||  INIT
    public void init() {
        enterProjectData();
    }
    
    public void enterProjectData() {
        PVector start = parseLatLon(projectData.startBB);
        PVector end = parseLatLon(projectData.endBB);
             println("Parsed Bounds:");
    println("Start: " + start);
    println("End: " + end);
        mapSubset = new WorldMapSubset(start, end, w, h);
        zoomableSubset = new ZoomableMap(mapSubset, w, h);
        
    }
    
    //  ——————————————————————————————————————————————————————————————————————————————————  ||  RUN
    public void run() {
        render();
    }
    
    //  ——————————————————————————————————————————————————————————————————————————————————  || RENDER
    
    public void render() {
        subsetMapGraphic = mapSubset.getMap(floor(w), floor(h));
        if (zoomableSubset == null) {
            println("zoomableSubset is null");
            return;
        }
        if (subsetMapGraphic == null) {
            println("subsetMapGraphic is null");
            return;
        }
 

        zoomableSubset.display(subsetMapGraphic, floor(w), floor(h));
        pg.beginDraw();  // Start drawing on the PGraphics buffer
        pg.background(255);
        pg.image(subsetMapGraphic, 0, 0);
        pg.endDraw();  // End drawing on the PGraphics buffer
        displayGraphics(pg, x, y, w, h);
        
    }
    
    
    //  ——————————————————————————————————————————————————————————————————————————————————  ||  INTERACTION
    
    //  ——————————————————————————————————————————————————————————————————————————————————  ||  SET
    
    //  ——————————————————————————————————————————————————————————————————————————————————  ||  GET
    
    
    
    
    public void keyPressedEvent() {  
    }
    
    public void mouseClickedEvent() {  
    }
    
    public void mouseWheelEvent(float e) {
    }
    
    public void mousedPressedEvent() {}
    public void mouseDraggedEvent() {}
    public void mouseReleasedEvent() {}
    
    public void setPosition(float x, float y) {
        this.x = x;
        this.y = y;
    }
    
    public void setSize(float w, float h) {
        this.w = w;
        this.h = h;
    }
    
    public void setPGraphics(PGraphics pg) {
        this.pg = pg;
    }
    
    public float getX() { return x; }
    public float getY() { return y; }
    public float getWidth() { return w; }
    public float getHeight() { return h; }
    public PGraphics getPGraphics() { return pg; }
}

class SocialModule implements Module{
    float x, y, w, h;
    PGraphics pg;
    //  ——————————————————————————————————————————————————————————————————————————————————  ||  INIT
    
    //  ——————————————————————————————————————————————————————————————————————————————————  ||  RUN
    
    //  ——————————————————————————————————————————————————————————————————————————————————  || RENDER
    
    //  ——————————————————————————————————————————————————————————————————————————————————  ||  INTERACTION
    
    //  ——————————————————————————————————————————————————————————————————————————————————  ||  SET
    
    //  ——————————————————————————————————————————————————————————————————————————————————  ||  GET
    public void init() {
    }
    
    public void run() {
        render();
    }
    
    public void render() {
        pg.beginDraw();  // Start drawing on the PGraphics buffer
        pg.background(255);
        pg.endDraw();  // End drawing on the PGraphics buffer
        displayGraphics(pg, x, y, w, h);
        
    }
    
    public void mouseClickedEvent() {
        
    }
    
    public void keyPressedEvent() {
        
    }
    public void mouseWheelEvent(float e) {
        
    }
    
    public void mousedPressedEvent() {}
    public void mouseDraggedEvent() {}
    public void mouseReleasedEvent() {}
    
    public void setPosition(float x, float y) {
        this.x = x;
        this.y = y;
    }
    
    public void setSize(float w, float h) {
        this.w = w;
        this.h = h;
    }
    
    public void setPGraphics(PGraphics pg) {
        this.pg = pg;
    }
    
    public float getX() { return x; }
    public float getY() { return y; }
    public float getWidth() { return w; }
    public float getHeight() { return h; }
    public PGraphics getPGraphics() { return pg; } 
}



public class IntroModule implements Module{
    private final PApplet pa;
    float x, y, w, h;
    PGraphics pg;
    
    Button[] buttons;
    
    float paddingSides = 10;
    float paddingTop = 14;
    //  ——————————————————————————————————————————————————————————————————————————————————  ||  INIT
    
    IntroModule(PApplet p) {
        pa = p;
    }
    
    public void init() {
        initButtons();
        
    }
    
    public void initButtons() {
        buttons = new Button[2];
        
        float xScl = 150;
        float yScl = 30; 
        
        buttons[0] = new MainButton();
        buttons[0].setPosition((w - xScl) / 2, 300);
        buttons[0].setSize(xScl, yScl);
        buttons[0].setLabel("Load Project");
        buttons[0].setActive(false);
        buttons[0].setPGraphics(introGraphics);
        
        buttons[1] = new MainButton();
        buttons[1].setPosition((w - xScl) / 2, 300 + yScl + 30);
        buttons[1].setSize(xScl, yScl);
        buttons[1].setLabel("New Project");
        buttons[1].setActive(false);
        buttons[1].setPGraphics(introGraphics);
    }
    
    
    
    //  ——————————————————————————————————————————————————————————————————————————————————  ||  RUN
    
    public void run() {
        checkButtons();
        render();
    }
    
    public void checkButtons() {
        PVector m = new PVector(mouseX, mouseY);
        for (Button b : buttons) {
            PVector bPos = new PVector(b.getX() + x, b.getY() + y);
            if (intersectRect(m, bPos, b.getWidth(), b.getHeight())) {
                b.setActive(true);
            } else {
                b.setActive(false);
            }
        }
    }
    
    
    //  ——————————————————————————————————————————————————————————————————————————————————  || RENDER
    
    
    public void render() {
        
        
        pg.beginDraw();  // Start drawing on the PGraphics buffer
        pg.background(255);
        pg.fill(0);
        pg.textFont(lBold);
        pg.textAlign(LEFT, TOP);
        pg.text("GEOPOLITICAL\nMAPPING", paddingSides, paddingTop);
        
        // make sure to load ui elements here !!!
        for (Button b : buttons) {
            b.render();
        }
        pg.endDraw();  // End drawing on the PGraphics buffer
        displayGraphics(pg, x, y, w, h);
        
    }
    
    //  ——————————————————————————————————————————————————————————————————————————————————  ||  INTERACTION
    
    
    public void keyPressedEvent() {}
    
    public void mouseClickedEvent() {
        if (buttons[0].getActive()) {
            pa.selectInput("SELECT JSON PROJECT", "loadProjectPrompt", null, this);
        } else if (buttons[1].getActive()) {
            programRunner.programState = 1;
            surface.setTitle("New Project");
        }
    }  
    
    public void loadProjectPrompt(File selection) {
        if (selection == null) {
            // add notification here!
        } else {
            loadProjectData(selection.getAbsolutePath());
            modules[1].init();
            programRunner.programState = 2;
            println("fileSelected");
            surface.setTitle(projectData.projectName);
        }
    }
    
    public void mousedPressedEvent() {}
    public void mouseDraggedEvent() {}
    public void mouseReleasedEvent() {}
    public void mouseWheelEvent(float e) {}
    
    
    
    //  ——————————————————————————————————————————————————————————————————————————————————  ||  SET
    
    public void setPosition(float x, float y) {
        this.x = x;
        this.y = y;
    }
    
    public void setSize(float w, float h) {
        this.w = w;
        this.h = h;
    }
    
    public void setPGraphics(PGraphics pg) {
        this.pg = pg;
    }
    
    //  ——————————————————————————————————————————————————————————————————————————————————  ||  GET
    
    public float getX() { return x; }
    public float getY() { return y; }
    public float getWidth() { return w; }
    public float getHeight() { return h; }
    public PGraphics getPGraphics() { return pg; } 
    
}

class NewProjectModule implements Module{
    float x, y, w, h;
    PGraphics pg;
    float paddingSides = 10;
    float paddingTop = 20;
    
    PVector mapPos = new PVector(200, 70);
    float mapScl = 250;
    
    ZoomableMap zoomableMap;
    PGraphics newProjectMap;        
    
    TextBoxInput[] textBoxInputs;
    Button[] buttons;
    
    
    //  ——————————————————————————————————————————————————————————————————————————————————  ||  INIT
    
    public void init() {
        initTextBoxes();
        initButtons();
        initMap();
    }
    
    public void initButtons() {
        buttons = new Button[2]; // 0 - createProject, 2 - resetBB
        
        float xScl = 150;
        float yScl = 30; 
        
        buttons[0] = new MainButton();
        buttons[0].setPosition((w - xScl) / 2, 370);
        buttons[0].setSize(xScl, yScl);
        buttons[0].setLabel("Create Project");
        buttons[0].setActive(false);
        buttons[0].setPGraphics(newProjectGraphics);
        
        buttons[1] = new SmallButton();
        buttons[1].setLabel("Reset Bounds");
        buttons[1].setSize(textWidth(buttons[1].getLabel()) + 4, 18);
        
        buttons[1].setPosition((mapPos.x + mapScl) - buttons[1].getWidth(), mapPos.y + mapScl + 8);
        buttons[1].setActive(false);
        buttons[1].setPGraphics(newProjectGraphics);
    }
    
    public void initTextBoxes() {
        textBoxInputs = new TextBoxInput[4]; // 0 - name, 1 - description, 2 - startDate, 3 - endDate
        
        textBoxInputs[0] = new TextInput();
        textBoxInputs[0].setPosition(30, 70);
        textBoxInputs[0].setSize(130, 18);
        textBoxInputs[0].setPGraphics(pg);
        textBoxInputs[0].setLabel("Project Name");
        textBoxInputs[0].setPrompt("Untitled");
        textBoxInputs[0].setInput("");
        textBoxInputs[0].setActive(false);
        textBoxInputs[0].setInputting(false);
        
        textBoxInputs[1] = new TextInput();
        textBoxInputs[1].setPosition(30, 120);
        textBoxInputs[1].setSize(130, 80);
        textBoxInputs[1].setPGraphics(pg);
        textBoxInputs[1].setLabel("Project Description");
        textBoxInputs[1].setPrompt("Type...");
        textBoxInputs[1].setInput("");
        textBoxInputs[1].setActive(false);
        textBoxInputs[1].setInputting(false);
        
        
        textBoxInputs[2] = new TextInput();
        textBoxInputs[2].setPosition(30, 320 - 68);
        textBoxInputs[2].setSize(80, 18);
        textBoxInputs[2].setPGraphics(pg);
        textBoxInputs[2].setLabel("Start Date");
        textBoxInputs[2].setPrompt("DD/MM/YYYY");
        textBoxInputs[2].setInput("");
        textBoxInputs[2].setActive(false);
        textBoxInputs[2].setInputting(false);
        
        textBoxInputs[3] = new TextInput();
        textBoxInputs[3].setPosition(30, 320 - 18);
        textBoxInputs[3].setSize(80, 18);
        textBoxInputs[3].setPGraphics(pg);
        textBoxInputs[3].setLabel("End Date");
        textBoxInputs[3].setPrompt("DD/MM/YYYY");
        textBoxInputs[3].setInput("");
        textBoxInputs[3].setActive(false);
        textBoxInputs[3].setInputting(false);
    }
    
    public void initMap() {
        zoomableMap = new ZoomableMap(worldMap, w, h);
        newProjectMap = worldMap.getMap(mapScl, mapScl);
    }
    
    
    //  ——————————————————————————————————————————————————————————————————————————————————  ||  RUN
    
    public void run() {
        checkTextBoxes();
        checkButtons();
        render();
    }
    
    public void checkTextBoxes() {
        PVector m = new PVector(mouseX, mouseY);
        for (TextBoxInput tb : textBoxInputs) {
            PVector tbPos = new PVector(tb.getX() + x, tb.getY() + y);
            if (intersectRect(m, tbPos, tb.getWidth(), tb.getHeight())) {
                tb.setActive(true);
            } else {
                tb.setActive(false);
            }
        }
        
    }
    
    public void checkButtons() {
        PVector m = new PVector(mouseX, mouseY);
        for (Button b : buttons) {
            PVector bPos = new PVector(b.getX() + x, b.getY() + y);
            if (intersectRect(m, bPos, b.getWidth(), b.getHeight())) {
                b.setActive(true);
            } else {
                b.setActive(false);
            }
        }
    }
    
    public boolean checkFieldComlpetion() {
        boolean result = true;
        for (TextBoxInput tb : textBoxInputs) {
            if (tb.getInput().length() <= 0) {
                result = false;
            }
        }
        
        if (zoomableMap.boxStart == null || zoomableMap.boxEnd == null) {
            result = false;
        }
        return result;
    }
    //  ——————————————————————————————————————————————————————————————————————————————————  || RENDER
    
    public void render() {
        if (intersectRect(new PVector(mouseX, mouseY), mapPos.copy().add(new PVector(x, y)), mapScl, mapScl)) {
            zoomableMap.updateHover(mouseX - x - mapPos.x, mouseY - y - mapPos.y);
            
        }
        
        zoomableMap.display(newProjectMap, floor(mapScl), floor(mapScl));
        pg.beginDraw(); 
        pg.background(255);
        pg.fill(0);
        
        
        for (TextBoxInput tb : textBoxInputs) {
            tb.render();
        }
        
        pg.fill(0);
        pg.textFont(sRegular);
        pg.textAlign(LEFT, BOTTOM);
        pg.text("Project Bounds", mapPos.x, mapPos.y - 4);
        
        pg.fill(120);
        pg.textAlign(LEFT, TOP);
        pg.textFont(sItalic);
        PVector cursorCordinates = pixelToLatLon(zoomableMap.hoverCoord.x, zoomableMap.hoverCoord.y, floor(mapScl), floor(mapScl));
        
        pg.text(cursorCordinates.x + ", " + cursorCordinates.y, mapPos.x, mapPos.y + mapScl + 8);
        
        pg.image(newProjectMap, mapPos.x, mapPos.y);
        pg.stroke(0);
        pg.strokeWeight(1);
        pg.noFill();
        pg.rect(mapPos.x, mapPos.y, mapScl, mapScl);
        
        for (Button b : buttons) {
            b.render();
        }
        
        pg.endDraw(); 
        displayGraphics(pg, x, y, w, h);
        
    }
    
    
    //  ——————————————————————————————————————————————————————————————————————————————————  ||  INTERACTION
    
    public void keyPressedEvent() {
        for (TextBoxInput tb : textBoxInputs) {
            if (tb.getInputting()) {
                if (key >= 32 && key <= 126) {
                    tb.setInput(tb.getInput() + key);
                } else if (key == BACKSPACE && tb.getInput().length() > 0) {
                    tb.setInput(tb.getInput().substring(0, tb.getInput().length() - 1));
                }
            }
        }
        
        
    }
    
    public void mouseClickedEvent() {
        boolean hit = false;
        
        for (TextBoxInput tb : textBoxInputs) {
            tb.setInputting(false);
            if (tb.getActive()) {
                tb.setInputting(true);
                hit = true;
            }
        }
        if (hit == false) {
            for (TextBoxInput tb : textBoxInputs) {
                tb.setInputting(false);
            }
        }
        
        if (buttons[0].getActive()) {
            if (checkFieldComlpetion()) {
                projectData.projectName = textBoxInputs[0].getInput();
                projectData.projectDescription = textBoxInputs[1].getInput();
                String[] sDate = parseDateField(textBoxInputs[2].getInput()); 
                projectData.startDate = formatDate(PApplet.parseInt(sDate[2]), PApplet.parseInt(sDate[1]), PApplet.parseInt(sDate[0]), 0, 0, 0, 0);
                String[] eDate = parseDateField(textBoxInputs[3].getInput()); 
                projectData.endDate = formatDate(PApplet.parseInt(eDate[2]), PApplet.parseInt(eDate[1]), PApplet.parseInt(eDate[0]), 0, 0, 0, 0);

                PVector sBB = pixelToLatLon(zoomableMap.boxStart.x, zoomableMap.boxStart.y, floor(mapScl), floor(mapScl));
                PVector eBB = pixelToLatLon(zoomableMap.boxEnd.x, zoomableMap.boxEnd.y, floor(mapScl), floor(mapScl));                
              
                projectData.startBB = str(sBB.x) + ", " + str(sBB.y);
                projectData.endBB = str(eBB.x) + ", " + str(eBB.y);
                saveProjectData("data/saves/" + projectData.projectName);
                
                modules[1].init();
                
                programRunner.projectLoaded = true;
                programRunner.programState = 2;
                surface.setTitle(projectData.projectName);

            }
        }
        
    }

    public String[] parseDateField(String date) {
        String[] parts = split(date, "/");
        if (parts.length != 3) return new String[] {"Invalid date format"};
        return parts;
    }
    
    public void mousedPressedEvent() {
        PVector m = new PVector(mouseX, mouseY);
        if (intersectRect(m, new PVector(x + mapPos.x, y + mapPos.y), floor(mapScl), floor(mapScl))) {
            if (mousePressed && mouseButton == RIGHT) {
                zoomableMap.startBox(m.x - x - mapPos.x, m.y - y - mapPos.y);
            } else {
                zoomableMap.startDrag(m.x, m.y);
            }
        }
    }
    
    public void mouseDraggedEvent() {
        PVector m = new PVector(mouseX, mouseY);
        if (intersectRect(m, new PVector(x + mapPos.x, y + mapPos.y), floor(mapScl), floor(mapScl))) {
            if (zoomableMap.drawingBox) {
                zoomableMap.updateBox(m.x - x - mapPos.x, m.y - y - mapPos.y);
            } else {
                zoomableMap.drag(m.x, m.y, floor(mapScl), floor(mapScl));
            }
        }
    }
    
    public void mouseReleasedEvent() {
        PVector m = new PVector(mouseX, mouseY);
        if (intersectRect(m, new PVector(x + mapPos.x, y + mapPos.y), floor(mapScl), floor(mapScl))) {
            if (zoomableMap.drawingBox) {
                zoomableMap.endBox();
            } else {
                zoomableMap.endDrag();
            }
        }
        
    }
    
    public void mouseWheelEvent(float e) {
        PVector m = new PVector(mouseX, mouseY);
        if (intersectRect(m, new PVector(x + mapPos.x, y + mapPos.y), mapScl, mapScl)) {
            zoomableMap.handleScroll(e, m.x - x - mapPos.x, m.y - y - mapPos.y, floor(mapScl), floor(mapScl));
        }
    }
    
    
    //  ——————————————————————————————————————————————————————————————————————————————————  ||  SET
    
    public void setPosition(float x, float y) {
        this.x = x;
        this.y = y;
    }
    
    public void setSize(float w, float h) {
        this.w = w;
        this.h = h;
    }
    
    public void setPGraphics(PGraphics pg) {
        this.pg = pg;
    }
    
    
    //  ——————————————————————————————————————————————————————————————————————————————————  ||  GET
    
    public float getX() { return x; }
    public float getY() { return y; }
    public float getWidth() { return w; }
    public float getHeight() { return h; }
    public PGraphics getPGraphics() { return pg; } 
    
}

public void run(int programState) {
    switch(programState) {
        case 0:
            introModules[0].run();
            break;
        case 1:
            introModules[1].run();
            break;
        case 2:
            modules[0].run();
            modules[1].run();
            modules[2].run();
            break;
    }
    
}


public void displayGraphics(PGraphics pg, float x, float y, float w, float h) {
    image(pg, x, y);
    noFill();
    stroke(0);
    strokeWeight(1);
    rect(x, y, w, h);
}

public void mouseClicked() {
    switch(programRunner.programState) {
        case 0:
            introModules[0].mouseClickedEvent();
            break;
        case 1:
            introModules[1].mouseClickedEvent();
            break;
        case 2:
            modules[0].mouseClickedEvent();
            modules[1].mouseClickedEvent();
            modules[2].mouseClickedEvent();
            break;
    } 
}

public void mousePressed() {
    switch(programRunner.programState) {
        
        case 1:
            introModules[1].mousedPressedEvent();
            break;
        
    } 
}

public void mouseDragged() {
    switch(programRunner.programState) {
        
        case 1:
            introModules[1].mouseDraggedEvent();
            break;
        
    } 
}

public void mouseReleased() {
    switch(programRunner.programState) {
        
        case 1:
            introModules[1].mouseReleasedEvent();
            break;
        
    } 
}

public void keyPressed() {
    switch(programRunner.programState) {
        
        case 1:
            introModules[1].keyPressedEvent();
            break;
        
    } 
}

public void mouseWheel(MouseEvent event) {
    float mouseWheelSensitivity = -0.005f;
    float e = event.getCount();
    e *= mouseWheelSensitivity;
    
    switch(programRunner.programState) {
        
        case 1:
            introModules[1].mouseWheelEvent(e);
            break;
        
    } 
}







class ProgramRunner{
    boolean projectLoaded;
    int programState;
    
    ProgramRunner() {
        projectLoaded = false;
        programState = 0;
    }
    
    
}
interface Button{
    void render();
    void setPosition(float x, float y);
    void setSize(float w, float h);
    void setPGraphics(PGraphics pg);
    void setLabel(String label);
    void setActive(boolean active);
    
    float getX();
    float getY();
    float getWidth();
    float getHeight();
    String getLabel();
    PGraphics getPGraphics();
    boolean getActive();
}



class MainButton implements Button{
    float x, y, w, h;
    PGraphics pg;
    String label;
    boolean active;
    
    
    
    public void render() {
        int activeVal = PApplet.parseInt(active); // 0 or 1 based on 'active'
        
        pg.pushMatrix();
        pg.translate(x, y);
        pg.stroke(0);
        pg.strokeWeight(1);
        pg.fill(255 * activeVal);
        pg.rect(0, 0, w, h);
        
        pg.fill(255 * (1 - activeVal));
        pg.noStroke();
        pg.textFont(mLight);
        pg.textAlign(CENTER, CENTER);
        pg.text(label, w / 2, h / 2);
        pg.popMatrix();
    }
    
    public void setPosition(float x, float y) {
        this.x = x;
        this.y = y;
    }
    
    public void setSize(float w, float h) {
        this.w = w;
        this.h = h;
    }
    
    public void setPGraphics(PGraphics pg) {
        this.pg = pg;
    }
    
    public void setLabel(String label) {
        this.label = label;
    }
    
    public void setActive(boolean active) {
        this.active = active;
    }
    
    public float getX() { return x; }
    public float getY() { return y; }
    public float getWidth() { return w; }
    public float getHeight() { return h; }
    public PGraphics getPGraphics() { return pg; } 
    public String getLabel() { return label; } 
    public boolean getActive() { return active; } 
    
}

class SmallButton implements Button{
    float x, y, w, h;
    PGraphics pg;
    String label;
    boolean active;
    
    
    
    public void render() {
        int activeVal = PApplet.parseInt(active); // 0 or 1 based on 'active'
        
        pg.pushMatrix();
        pg.translate(x, y);
        pg.stroke(0);
        pg.strokeWeight(1);
        pg.fill(255 * activeVal);
        pg.rect(0, 0, w, h);
        
        pg.fill(255 * (1 - activeVal));
        pg.noStroke();
        pg.textFont(sLight);
        pg.textAlign(CENTER, CENTER);
        pg.text(label, w / 2, h / 2);
        pg.popMatrix();
    }
    
    public void setPosition(float x, float y) {
        this.x = x;
        this.y = y;
    }
    
    public void setSize(float w, float h) {
        this.w = w;
        this.h = h;
    }
    
    public void setPGraphics(PGraphics pg) {
        this.pg = pg;
    }
    
    public void setLabel(String label) {
        this.label = label;
    }
    
    public void setActive(boolean active) {
        this.active = active;
    }
    
    public float getX() { return x; }
    public float getY() { return y; }
    public float getWidth() { return w; }
    public float getHeight() { return h; }
    public PGraphics getPGraphics() { return pg; } 
    public String getLabel() { return label; } 
    public boolean getActive() { return active; } 
    
}

interface TextBoxInput{
    void render();
    void setPosition(float x, float y);
    void setSize(float w, float h);
    void setPGraphics(PGraphics pg);
    void setLabel(String label);
    void setPrompt(String prompt);
    void setInput(String input);
    void setActive(boolean active);
    void setInputting(boolean inputting);
    float getX();
    float getY();
    float getWidth();
    float getHeight();
    String getLabel();
    String getPrompt();
    String getInput();
    PGraphics getPGraphics();
    boolean getActive();
    boolean getInputting();
    
}

class TextInput implements TextBoxInput{
    
    float x, y, w, h;
    PGraphics pg;
    String label, prompt, input;
    boolean active, inputting;
    
    public void render() {
        pg.pushMatrix();
        pg.translate(x, y);
        
        // Border
        pg.stroke(0);
        pg.strokeWeight(1 + max(PApplet.parseInt(inputting), PApplet.parseInt(active) * 0.25f));
        pg.fill(255);
        pg.rect(0, 0, w, h);
        
        // Selector 
        float selectorScl = 4;
        pg.fill(0);
        
        if(inputting){pg.rect(- selectorScl, 0, selectorScl, selectorScl);}
        pg.noStroke();

        pg.textFont(sRegular);
        pg.textAlign(LEFT, BOTTOM);
        pg.text(label, 0, -4);
        
        pg.textAlign(LEFT);

        pg.textFont(sLight);
        if (input.length() >= 0 && inputting) {
            pg.fill(120.0f * norm(sin(PApplet.parseFloat(frameCount) * 0.01f), -1, 1));
            pg.text(input + "|", 4, 4, w, h);
        } else if (input.length() == 0 && !inputting) {
            pg.fill(120);
            pg.text(prompt, 4, 4, w, h);
            
        } else {
            pg.fill(40);
            pg.text(input , 4, 4, w, h);
            
        }
        
        
        
        
        pg.popMatrix();
        
    }
    
    public void setPosition(float x, float y) {
        this.x = x;
        this.y = y;
    }
    
    public void setSize(float w, float h) {
        this.w = w;
        this.h = h;
    }
    
    public void setPGraphics(PGraphics pg) {
        this.pg = pg;
    }
    
    public void setLabel(String label) {
        this.label = label;
    }
    
    public void setPrompt(String prompt) {
        this.prompt = prompt;
    }
    
    public void setInput(String input) {
        this.input = input;
    }
    
    public void setActive(boolean active) {
        this.active = active;
    }
    
    public void setInputting(boolean inputting) {
        this.inputting = inputting;
    }
    
    
    
    public float getX() { return x; }
    public float getY() { return y; }
    public float getWidth() { return w; }
    public float getHeight() { return h; }
    public PGraphics getPGraphics() { return pg; } 
    public String getLabel() { return label; } 
    public String getPrompt() { return prompt; } 
    public String getInput() { return input; } 
    public boolean getInputting() { return inputting; } 
    public boolean getActive() { return active; } 
}

class ZoomableMap {
    WorldMap worldMap;
    float zoom = 1;
    float offsetX = 0;
    float offsetY = 0;
    float prevMouseX, prevMouseY;
    boolean isDragging = false;
    PVector hoverCoord = new PVector(0, 0);
    boolean hovering = false;
    PVector boxStart = null;
    PVector boxEnd = null;
    boolean drawingBox = false;

    float viewWidth, viewHeight;

    ZoomableMap(WorldMap worldMap, float viewWidth, float viewHeight) {
        this.worldMap = worldMap;
        this.viewWidth = viewWidth;
        this.viewHeight = viewHeight;
        fitToBounds();
    }

    public void fitToBounds() {
        if (!(worldMap instanceof WorldMapSubset)) return;

        WorldMapSubset subset = (WorldMapSubset) worldMap;

        PVector pMin = latLonToPixel(subset.minLatLon.x, subset.minLatLon.y, viewWidth, viewHeight);
        PVector pMax = latLonToPixel(subset.maxLatLon.x, subset.maxLatLon.y, viewWidth, viewHeight);

        float minX = min(pMin.x, pMax.x);
        float maxX = max(pMin.x, pMax.x);
        float minY = min(pMin.y, pMax.y);
        float maxY = max(pMin.y, pMax.y);

        float subsetW = maxX - minX;
        float subsetH = maxY - minY;

        float padding = 20;
        float zoomW = (viewWidth - 2 * padding) / subsetW;
        float zoomH = (viewHeight - 2 * padding) / subsetH;
        zoom = min(zoomW, zoomH);

        float centerX = (minX + maxX) / 2;
        float centerY = (minY + maxY) / 2;

        float canvasCenterX = viewWidth / 2;
        float canvasCenterY = viewHeight / 2;

        offsetX = canvasCenterX - centerX * zoom;
        offsetY = canvasCenterY - centerY * zoom;
    }

    public void display(PGraphics pg, int w, int h) {
        pg.beginDraw();
        pg.background(255);
        pg.pushMatrix();
        pg.translate(offsetX, offsetY);
        pg.scale(zoom);

        ArrayList<ArrayList<ArrayList<PVector>>> countries = worldMap.countryPolygons;
        pg.stroke(0);
        pg.strokeWeight(0.25f / zoom);
        pg.noFill();
        for (ArrayList<ArrayList<PVector>> country : countries) {
            for (ArrayList<PVector> poly : country) {
                pg.beginShape();
                for (PVector pt : poly) {
                    pg.vertex(pt.x, pt.y);
                }
                pg.endShape(CLOSE);
            }
        }

        if (boxStart != null && boxEnd != null) {
            pg.stroke(255, 0, 0);
            pg.strokeWeight(1.0f / zoom);
            pg.noFill();

            float x = min(boxStart.x, boxEnd.x);
            float y = min(boxStart.y, boxEnd.y);
            float size = max(abs(boxEnd.x - boxStart.x), abs(boxEnd.y - boxStart.y));
            pg.rect(x, y, size, size);
        }

        pg.popMatrix();
        pg.endDraw();
    }

    public void handleScroll(float e, float mx, float my, int viewW, int viewH) {
        float prevZoom = zoom;
        float factor = 1.05f;
        if (e > 0) {
            zoom *= factor;
        } else {
            zoom /= factor;
        }
        zoom = constrain(zoom, 1, 200);

        float scaleChange = zoom / prevZoom;
        offsetX = mx - (mx - offsetX) * scaleChange;
        offsetY = my - (my - offsetY) * scaleChange;
        clampOffset(viewW, viewH);
    }

    public void updateHover(float x, float y) {
        float tx = (x - offsetX) / zoom;
        float ty = (y - offsetY) / zoom;
        hoverCoord.set(tx, ty);
        hovering = true;
    }

    public void startBox(float x, float y) {
        drawingBox = true;
        boxStart = new PVector((x - offsetX) / zoom, (y - offsetY) / zoom);
        boxEnd = boxStart.copy();
    }

    public void updateBox(float x, float y) {
        if (drawingBox && boxStart != null) {
            boxEnd = new PVector((x - offsetX) / zoom, (y - offsetY) / zoom);
        }
    }

    public void endBox() {
        drawingBox = false;
        if (boxStart != null && boxEnd != null) {
            enforceSquareBox();
        }
    }

    public void enforceSquareBox() {
        float dx = boxEnd.x - boxStart.x;
        float dy = boxEnd.y - boxStart.y;
        float size = max(abs(dx), abs(dy));
        boxEnd.x = boxStart.x + (dx >= 0 ? size : -size);
        boxEnd.y = boxStart.y + (dy >= 0 ? size : -size);
    }

    public void resetView() {
        fitToBounds();
    }

    public void startDrag(float x, float y) {
        isDragging = true;
        prevMouseX = x;
        prevMouseY = y;
    }

    public void drag(float x, float y, int viewW, int viewH) {
        if (isDragging) {
            offsetX += x - prevMouseX;
            offsetY += y - prevMouseY;
            prevMouseX = x;
            prevMouseY = y;
            clampOffset(viewW, viewH);
        }
    }

    public void endDrag() {
        isDragging = false;
    }

    public void clampOffset(int viewW, int viewH) {
        float zoomedWidth = viewW * zoom;
        float zoomedHeight = viewH * zoom;

        float maxOffsetX = 0;
        float maxOffsetY = 0;
        float minOffsetX = min(0, viewW - zoomedWidth);
        float minOffsetY = min(0, viewH - zoomedHeight);

        offsetX = constrain(offsetX, minOffsetX, maxOffsetX);
        offsetY = constrain(offsetY, minOffsetY, maxOffsetY);
    }

    public PVector clampLatLon(PVector latlon) {
        float lat = constrain(latlon.x, -85.0511f, 85.0511f);
        float lon = constrain(latlon.y, -180, 180);
        return new PVector(lat, lon);
    }
}
public boolean intersectRect(PVector a, PVector b, float bw, float bh) {
    if (a.x > b.x && a.x <= b.x + bw && a.y > b.y && a.y <= b.y + bh) {
        return true;
    } else {
        return false;
    }
}

public boolean pointInPolygon(float x, float y, ArrayList<PVector> poly) {
  boolean inside = false;
  int n = poly.size();
  for (int i = 0, j = n - 1; i < n; j = i++) {
    float xi = poly.get(i).x, yi = poly.get(i).y;
    float xj = poly.get(j).x, yj = poly.get(j).y;

    boolean intersect = ((yi > y) != (yj > y)) &&
                        (x < (xj - xi) * (y - yi) / (yj - yi + 0.00001f) + xi);
    if (intersect) inside = !inside;
  }
  return inside;
}

public PVector parseLatLon(String coord) {
  String[] parts = split(trim(coord), ",");
  if (parts.length != 2) return null;
  float lon = PApplet.parseFloat(trim(parts[0]));  // longitude first!
  float lat = PApplet.parseFloat(trim(parts[1]));  // latitude second
  return new PVector(lon, lat);       // your code expects (lat, lon)
}


public PVector latLonToPixel(float lat, float lon, float w, float h) {
  float x = (lon + 180.0f) / 360.0f;
  float sinLat = sin(radians(lat));
  float y = 0.5f - log((1 + sinLat) / (1 - sinLat)) / (4 * PI);
  x *= w;
  y *= h;
  return new PVector(x, y);
}




public PVector pixelToLatLon(float x, float y, int w, int h) {
  float normX = x / w;  // [0,1] range
  float normY = y / h; // [0,1] range

  float lon = normX * 360.0f - 180.0f;
  float latRad = PI * (1 - 2 * normY);
  float lat = degrees(asin(tanh(latRad)));

  return new PVector(lat, lon);
}

public float tanh(float x) {
  float ex = exp(x);
  float exNeg = exp(-x);
  return (ex - exNeg) / (ex + exNeg);
}

public PGraphics extractRegion(PGraphics source, PVector topLeft, PVector bottomRight) {
  int x = PApplet.parseInt(min(topLeft.x, bottomRight.x));
  int y = PApplet.parseInt(min(topLeft.y, bottomRight.y));
  int w = PApplet.parseInt(abs(bottomRight.x - topLeft.x));
  int h = PApplet.parseInt(abs(bottomRight.y - topLeft.y));

  PGraphics subset = createGraphics(w, h);
  subset.beginDraw();
  subset.image(source, -x, -y);  // Shift so target area is drawn at (0, 0)
  subset.endDraw();
  return subset;
}


public Calendar DateToCalendar(Date date) {
    Calendar calendar = Calendar.getInstance();
    calendar.setTime(date);
    return calendar;
}

public Date ISOToDate(String ISODate) {
    try {
        SimpleDateFormat isoFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
        return isoFormat.parse(ISODate);
    }
    catch(Exception e) {
        e.printStackTrace();
        return null;
    }
}

public int calculateDaysBetween(String date1, String date2) {
    Date startDate = ISOToDate(date1);
    Date endDate = ISOToDate(date2);
    long diffInMillies = Math.abs(endDate.getTime() - startDate.getTime());
    long diffInDays = diffInMillies / (1000 * 60 * 60 * 24);
    return(int) diffInDays;
}

public String getWeekDay(Calendar calendar) {
    return weekdayTitle(calendar.get(Calendar.DAY_OF_WEEK));
}

public String weekdayTitle(int i) {
    String[] days = {"-", "Saturday", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday"};
    return days[i];
}

public String monthTitle(int i) {
    String[] months = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "Novermber", "December"};
    return months[i];
}

public int[] parseDate(String date) {
    int[] dateValues;
    String TZ = date.substring(19, date.length());
    String rawDate = date.substring(0, 19);
    dateValues = PApplet.parseInt(splitTokens(rawDate, "-T:"));
    if (TZ == "Z") TZ = "0";
    dateValues = append(dateValues, PApplet.parseInt(TZ));
    return dateValues;
}

public String formatDate(int YYYY, int MM, int DD, int hh, int mm, int ss, int TZ) {
    String offsetMarker = "Z";
    if (TZ != 0) offsetMarker = nfp(TZ, 0);
    String formattedDate = nf(YYYY, 4) + "-" + nf(MM, 2) + "-" + nf(DD, 2) + "T" +
        nf(hh, 2) + "-" + nf(mm, 2) + "-" + nf(ss, 2) + offsetMarker;
    return formattedDate;
}



public float sinh(float x) {
    return(exp(x) - exp( -x)) / 2.0f;
}

public String generateRandomID() {
    BigInteger BIntID = new BigInteger(128, random);
    return BIntID.toString(16);
}


  public void settings() { size(960, 540, P2D);
pixelDensity(displayDensity(2)); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Prototype_Refactored" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
