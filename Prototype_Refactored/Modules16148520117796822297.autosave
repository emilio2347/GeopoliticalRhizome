interface Module {
    void run();  // All modules will implement their own render logic
    void init();
    void mousePressedEvent(float e);
    void keyPressedEvent();
    void mouseWheelEvent();
    // Methods to get/set position and size
    void setPosition(float x, float y);
    void setSize(float w, float h);
    void setPGraphics(PGraphics pg);
    
    float getX();
    float getY();
    float getWidth();
    float getHeight();
    PGraphics getPGraphics();
}



class TemporalModule implements Module{
    float x, y, w, h;
    PGraphics pg;
    
    void init() {
    }
    
    void run() {
        render();
    }
    
    void render() {
        pg.beginDraw();  // Start drawing on the PGraphics buffer
        pg.background(255);
        
        // make sure to load ui elements here !!!
        pg.endDraw();  // End drawing on the PGraphics buffer
        displayGraphics(pg, x, y, w, h);
        
    }
    
    void mousePressedEvent() {
        
    }
    void keyPressedEvent() {
        
    }
    void mouseWheelEvent() {   
    }
    
    
    public void setPosition(float x, float y) {
        this.x = x;
        this.y = y;
    }
    
    public void setSize(float w, float h) {
        this.w = w;
        this.h = h;
    }
    
    public void setPGraphics(PGraphics pg) {
        this.pg = pg;
    }
    
    public float getX() { return x; }
    public float getY() { return y; }
    public float getWidth() { return w; }
    public float getHeight() { return h; }
    public PGraphics getPGraphics() { return pg; }
}

class SpatialModule implements Module{
    float x, y, w, h;
    PGraphics pg;
    
    void init() {
    }
    
    void run() {
        render();
    }
    
    void render() {
        pg.beginDraw();  // Start drawing on the PGraphics buffer
        pg.background(255);
        
        pg.pushMatrix();
        pg.translate(x, y);
        
        pg.popMatrix();
        
        pg.endDraw();  // End drawing on the PGraphics buffer
        displayGraphics(pg, x, y, w, h);
        
    }
    
    void mousePressedEvent() {
        
    }
    
    void keyPressedEvent() {
        
    }
    void mouseWheelEvent(){
        
    }
    public void setPosition(float x, float y) {
        this.x = x;
        this.y = y;
    }
    
    public void setSize(float width, float height) {
        this.w = w;
        this.h = h;
    }
    
    public void setPGraphics(PGraphics pg) {
        this.pg = pg;
    }
    
    public float getX() { return x; }
    public float getY() { return y; }
    public float getWidth() { return w; }
    public float getHeight() { return h; }
    public PGraphics getPGraphics() { return pg; }
}

class SocialModule implements Module{
    float x, y, w, h;
    PGraphics pg;
    
    void init() {
    }
    
    void run() {
        render();
    }
    
    void render() {
        pg.beginDraw();  // Start drawing on the PGraphics buffer
        pg.background(255);
        pg.endDraw();  // End drawing on the PGraphics buffer
        displayGraphics(pg, x, y, w, h);
        
    }
    
    void mousePressedEvent() {
        
    }
    
    void keyPressedEvent() {
        
    }
    void mouseWheelEvent(){
        
    }
    public void setPosition(float x, float y) {
        this.x = x;
        this.y = y;
    }
    
    public void setSize(float w, float h) {
        this.w = w;
        this.h = h;
    }
    
    public void setPGraphics(PGraphics pg) {
        this.pg = pg;
    }
    
    public float getX() { return x; }
    public float getY() { return y; }
    public float getWidth() { return w; }
    public float getHeight() { return h; }
    public PGraphics getPGraphics() { return pg; } 
}



class IntroModule implements Module{
    float x, y, w, h;
    PGraphics pg;
    
    Button[] buttons;
    
    float paddingSides = 10;
    float paddingTop = 14;
    
    void init() {
        initButtons();
        
    }
    
    void run() {
        checkButtons();
        render();
    }
    
    void checkButtons() {
        PVector m = new PVector(mouseX, mouseY);
        for (Button b : buttons) {
            PVector bPos = new PVector(b.getX() + x, b.getY() + y);
            if (intersectRect(m, bPos, b.getWidth(), b.getHeight())) {
                b.setActive(true);
            } else {
                b.setActive(false);
            }
        }
    }
    
    
    void initButtons() {
        buttons = new Button[2];
        
        float xScl = 150;
        float yScl = 30; 
        
        buttons[0] = new LoadProjectButton();
        buttons[0].setPosition((w - xScl) / 2, 300);
        buttons[0].setSize(xScl, yScl);
        buttons[0].setLabel("Load Project");
        buttons[0].setActive(false);
        buttons[0].setPGraphics(introGraphics);
        
        buttons[1] = new NewProjectButton();
        buttons[1].setPosition((w - xScl) / 2, 300 + yScl + 30);
        buttons[1].setSize(xScl, yScl);
        buttons[1].setLabel("New Project");
        buttons[1].setActive(false);
        buttons[1].setPGraphics(introGraphics);
    }
    
    void render() {
        
        
        pg.beginDraw();  // Start drawing on the PGraphics buffer
        pg.background(255);
        pg.fill(0);
        pg.textFont(lBold);
        pg.textAlign(LEFT, TOP);
        pg.text("GEOPOLITICAL\nMAPPING", paddingSides, paddingTop);
        
        // make sure to load ui elements here !!!
        for (Button b : buttons) {
            b.render();
        }
        pg.endDraw();  // End drawing on the PGraphics buffer
        displayGraphics(pg, x, y, w, h);
        
    }
    
    void mousePressedEvent() {
        if (buttons[0].getActive()) {
            selectInput("SELECT JSON PROJECT", "loadProjectPrompt");
        } else if (buttons[1].getActive()) {
            programRunner.programState = 1;
        }
    }
    
    void keyPressedEvent() {
        
    }
    void mouseWheelEvent(){
        
    }
    void loadProjectPrompt(File selection) {
        if (selection == null) {
            // add notification here!
        } else {
            loadProjectData(selection.getAbsolutePath());
            programRunner.programState = 2;
        }
    }
    
    public void setPosition(float x, float y) {
        this.x = x;
        this.y = y;
    }
    
    public void setSize(float w, float h) {
        this.w = w;
        this.h = h;
    }
    
    public void setPGraphics(PGraphics pg) {
        this.pg = pg;
    }
    
    public float getX() { return x; }
    public float getY() { return y; }
    public float getWidth() { return w; }
    public float getHeight() { return h; }
    public PGraphics getPGraphics() { return pg; } 
    
}

class NewProjectModule implements Module{
    float x, y, w, h;
    PGraphics pg;
    float paddingSides = 10;
    float paddingTop = 14;
    
    ZoomableMap zoomableMap;
    PGraphics newProjectMap;        
    
    TextBoxInput[] textBoxInputs;
    
    
    void init() {
        initTextBoxes();
        initMap();
    }
    
    void initTextBoxes() {
        textBoxInputs = new TextBoxInput[3]; // 0 - name, 1 - startDate, 2 - endDate
        
        textBoxInputs[0] = new NewProjectNameInput();
        textBoxInputs[0].setPosition(30, 100);
        textBoxInputs[0].setSize(80);
        textBoxInputs[0].setPGraphics(pg);
        textBoxInputs[0].setLabel("Project Name");
        textBoxInputs[0].setPrompt("Untitled");
        textBoxInputs[0].setInput("");
        textBoxInputs[0].setActive(false);
        textBoxInputs[0].setInputting(false);
        
        
        textBoxInputs[1] = new NewProjectNameInput();
        textBoxInputs[1].setPosition(30, 180);
        textBoxInputs[1].setSize(80);
        textBoxInputs[1].setPGraphics(pg);
        textBoxInputs[1].setLabel("Start Date");
        textBoxInputs[1].setPrompt("DD/MM/YYYY");
        textBoxInputs[1].setInput("");
        textBoxInputs[1].setActive(false);
        textBoxInputs[1].setInputting(false);
        
        textBoxInputs[2] = new NewProjectNameInput();
        textBoxInputs[2].setPosition(30, 260);
        textBoxInputs[2].setSize(80);
        textBoxInputs[2].setPGraphics(pg);
        textBoxInputs[2].setLabel("End Date");
        textBoxInputs[2].setPrompt("DD/MM/YYYY");
        textBoxInputs[2].setInput("");
        textBoxInputs[2].setActive(false);
        textBoxInputs[2].setInputting(false);
    }
    
    void initMap() {
        zoomableMap = new ZoomableMap(worldMap);
        newProjectMap = worldMap.getMap(300, 300);
    }
    
    void run() {
        checkTextBoxes();
        render();
    }
    
    
    
    void render() {
        zoomableMap.display(newProjectMap, 300, 300);
        pg.beginDraw(); 
        pg.background(255);
        pg.fill(0);
        pg.textFont(lBold);
        pg.textAlign(LEFT, TOP);
        pg.text("NEW\nPROJECT", paddingSides, paddingTop);
        for (TextBoxInput tb : textBoxInputs) {
            tb.render();
        }
        pg.image(mp, 150, 100);
        pg.stroke(0);
        pg.strokeWeight(1);
        pg.noFill();
        pg.rect(150, 100, 300, 300);
        pg.endDraw(); 
        displayGraphics(pg, x, y, w, h);
        
    }
    
    void mousePressedEvent() {
        boolean hit = false;
        for (TextBoxInput tb : textBoxInputs) {
            if (tb.getActive()) {
                tb.setInputting(true);
                hit = true;
            }
        }
        if (hit == false) {
            for (TextBoxInput tb : textBoxInputs) {
                tb.setInputting(false);
            }
        }
    }
    void keyPressedEvent() {
        for (TextBoxInput tb : textBoxInputs) {
            if (tb.getInputting()) {
                if (key >= 32 && key <= 126) {
                    tb.setInput(tb.getInput() + key);
                } else if (key == BACKSPACE && tb.getInput().length() == 0) {
                    tb.setInput(tb.getInput().substring(0, tb.getInput().length()));
                }
            }
        }
    }
    
    void mouseWheelEvent(float e) {
        PVector m = new PVector(mouseX, mouseY);
        if(intersectRect(m, new PVector(150, 100), 300, 300)){
            zoomableMap.handleScroll(e);
        }
    }
    
    void checkTextBoxes() {
        PVector m = new PVector(mouseX, mouseY);
        for (TextBoxInput tb : textBoxInputs) {
            PVector tbPos = new PVector(tb.getX() + x, tb.getY() + y);
            if (intersectRect(m, tbPos, tb.getWidth(), tb.getHeight())) {
                tb.setActive(true);
            } else {
                tb.setActive(false);
            }
        }
        
    }
    
    public void setPosition(float x, float y) {
        this.x = x;
        this.y = y;
    }
    
    public void setSize(float w, float h) {
        this.w = w;
        this.h = h;
    }
    
    public void setPGraphics(PGraphics pg) {
        this.pg = pg;
    }
    
    public float getX() { return x; }
    public float getY() { return y; }
    public float getWidth() { return w; }
    public float getHeight() { return h; }
    public PGraphics getPGraphics() { return pg; } 
    
}
